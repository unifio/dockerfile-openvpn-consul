#!/bin/bash

#
# Run the OpenVPN server normally
#

if [ "$DEBUG" == "1" ]; then
  set -x
fi

set -e

cd $OPENVPN

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()

# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# Convert 1.2.3.4/24 -> 255.255.255.0
cidr2mask()
{
    local i
    local subnetmask=""
    local cidr=${1#*/}
    local full_octets=$(($cidr/8))
    local partial_octet=$(($cidr%8))

    for ((i=0;i<4;i+=1)); do
        if [ $i -lt $full_octets ]; then
            subnetmask+=255
        elif [ $i -eq $full_octets ]; then
            subnetmask+=$((256 - 2**(8-$partial_octet)))
        else
            subnetmask+=0
        fi
        [ $i -lt 3 ] && subnetmask+=.
    done
    echo $subnetmask
}

# Used often enough to justify a function
getroute() {
    echo ${1%/*} $(cidr2mask $1)
}

addArg "--config" "$OPENVPN/openvpn.conf"

if [ -z "${CONSUL_PREFIX}" ]; then
    source "$OPENVPN/ovpn_env.sh"
fi

mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
fi

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# Grab all of the keys from s3 with aws-cli 
if [ "${CONSUL_PREFIX}" ];then 
    OPENVPN_CERT_SOURCE=${OPENVPN_CERT_SOURCE:-"$(/usr/local/bin/envconsul -sanitize -pristine -upcase -once -prefix ${CONSUL_PREFIX}/${1} env | grep OPENVPN_CERT_SOURCE | awk -F = '{print $NF}')"}
    if [ "${OPENVPN_CERT_SOURCE}" ]; then 
        aws s3 cp "${OPENVPN_CERT_SOURCE}" "$OPENVPN/keys" --recursive
        chmod 0700 "$OPENVPN/keys"
        if [ -r "$OPENVPN/keys/crl.pem" ]; then
            ln "$OPENVPN/keys/crl.pem" "$OPENVPN/crl.pem"
            chmod 0644 "$OPENVPN/crl.pem"
            addArg "--crl-verify" "$OPENVPN/crl.pem"
        fi
    fi
    # Grab the server configuration from consul as well
    # requires mounting a config directory in /tmp/consul_openvpn
    OPENVPN_CONFIG_SOURCE=${OPENVPN_CONFIG_SOURCE:-"$(/usr/local/bin/envconsul -sanitize -pristine -upcase -once -prefix ${CONSUL_PREFIX}/${1} env | grep OPENVPN_CONFIG_SOURCE | awk -F = '{print $NF}')"}
    if [ "${OPENVPN_CONFIG_SOURCE}" ]; then
        aws s3 cp "${OPENVPN_CONFIG_SOURCE}" "${OPENVPN}/consul_configs" --recursive
        consul-template -template "${OPENVPN}/consul_configs/openvpn_server_consul.tpl:${OPENVPN}/openvpn.conf" -once
    fi
    # Set the OVPN_SERVER variable from consul KV 
    OVPN_SERVER=${OVPN_SERVER:-"$(/usr/local/bin/envconsul -sanitize -pristine -upcase -once -prefix ${CONSUL_PREFIX}/${1} env | grep OVPN_OPENVPN_SERVER_IP_SUBNET | awk -F = '{print $NF}')"}
else    
    # Use a hacky hardlink as the CRL Needs to be readable by the user/group
    # OpenVPN is running as.  Only pass arguments to OpenVPN if it's found.
    if [ -r "$EASYRSA_PKI/crl.pem" ]; then
        if [ ! -r "$OPENVPN/crl.pem" ]; then
            ln "$EASYRSA_PKI/crl.pem" "$OPENVPN/crl.pem"
            chmod 644 "$OPENVPN/crl.pem"
        fi
        addArg "--crl-verify" "$OPENVPN/crl.pem"
    fi
fi
# When using --net=host, use this to specify nat device.
[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

#Setup NAT forwarding if requested
if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
    if [ "${OVPN_SERVER}" ]; then
        iptables -t nat -C POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE || {
        iptables -t nat -A POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE
        }
        for i in "${OVPN_ROUTES[@]}"; do
            iptables -t nat -C POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE || {
            iptables -t nat -A POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE
            }
        done
    else 
        echo "Unable to set OVPN_SERVER Not Set"
        exit 1 
    fi
fi

ip -6 route show default 2>/dev/null
if [ $? = 0 ]; then
    echo "Enabling IPv6 Forwarding"
    # If this fails, ensure the docker container is run with --privileged
    # Could be side stepped with `ip netns` madness to drop privileged flag

    sysctl -w net.ipv6.conf.default.forwarding=1 || echo "Failed to enable IPv6 Forwarding default"
    sysctl -w net.ipv6.conf.all.forwarding=1 || echo "Failed to enable IPv6 Forwarding"
fi

echo "Running 'openvpn ${ARGS[@]} ${USER_ARGS[@]}'"
#exit 1
exec openvpn ${ARGS[@]} ${USER_ARGS[@]}

